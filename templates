python-ts-mode python-mode

(rpdb "import rpdb; rpdb.set_trace()")
(breakpoint "breakpoint()")
(pool "pool = Pool()")
(m2o p " = fields.Many2One(" p ", " p ", ondelete='" p "')")
(o2m p " = fields.One2Many(" p ", " p ", " p ")")
(setup > "@classmethod" n> "def __setup__(cls):" n> "super().__setup__()" n>)
(printbox "print('#" (make-string (+ 2 (length str)) ?#) "#')" n>
          "print('# " (s str ) " #')" n>
          "print('#" (make-string (+ 2 (length str)) ?#) "#')")

nxml-mode

(lf "<label name=\"" (s name) "\"/>" n> "<field name=\"" (s name) "\"/>")
(label "<label name=\"" p "\"" p "/>")
(field "<field name=\"" p "\"" p "/>")
(box "<!-- #" (make-string (+ 2 (length str)) ?#) "# -->" n>
     "<!-- # " (s str)                       " # -->" n>
     "<!-- #" (make-string (+ 2 (length str)) ?#) "# -->")
(newline "<newline/>")
(message "<record model=\"" p "\" id=\"" p "\">" n>
         "<field name=\"" p "\">" p "</field>" n>
         "</record>" >)

elixir-mode elixir-ts-mode

(defmodule "defmodule " p " do" n> q > n "end" >)
(def "def " p " do" n> q > n> "end" >)
(defp "defp " p " do" n> q > n> "end" >)
(defo "def " p ", do: " q)
(defop "defp " p ", do: " q)
(prot "def " p "(" q ")")
(pprot "defp " p "(" q ")")
(doc "@doc \"\"\"" n> p n> "\"\"\"")
(insp "IO.inspect(" q ")")
;; (fn "fn " p "->" n> q > n> "end" >)
(getenv "Application.get_env(:" (p (project-name (project-current))) ", :" p ")")
(ffdev "Application.get_env(:suv_services, :env) in [:dev]")
(ffqa "Application.get_env(:suv_services, :env) in [:dev, :qa]")
(ffpp "Application.get_env(:suv_services, :env) in [:dev, :qa, :preprod]")
(ffindus "Application.get_env(:suv_services, :env) in [:dev, :qa, :preprod, :indus]")
(ffprod "Application.get_env(:suv_services, :env) in [:dev, :qa, :preprod, :indus, :prod]")
;; (do "do" n> q > n> "end" >)
;; (after "after" n> q > n> "end" >)
;; Local Variables:
;; mode: lisp-data
;; outline-regexp: "[a-z]"
;; End:
